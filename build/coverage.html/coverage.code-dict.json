{"/home/travis/build/npmtest/node-npmtest-gulp-coverage/test.js":"/* istanbul instrument in package npmtest_gulp_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/lib.npmtest_gulp_coverage.js":"/* istanbul instrument in package npmtest_gulp_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_coverage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_coverage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-coverage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_coverage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_coverage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_coverage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_coverage.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_coverage.__dirname + '/lib.npmtest_gulp_coverage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/index.js":"/*\n * Copyright (C) 2014 Dylan Barrell, all rights reserved\n *\n * Licensed under the MIT license\n *\n */\n\nvar path = require('path');\nvar fs = require('fs');\nvar cover = require('./contrib/cover');\nvar through2 = require('through2');\nvar gutil = require('gulp-util');\nvar coverInst;\n\nmodule.exports.instrument = function (options) {\n    options = options || {};\n    cover.cleanup();\n    cover.init();\n    if (coverInst) {\n        coverInst.release();\n    }\n    coverInst = cover.cover(options.pattern, options.debugDirectory);\n\n    return through2.obj(function (file, encoding, cb) {\n        if (!file.path) {\n            this.emit('error', new gutil.PluginError('gulp-coverage', 'Streaming not supported'));\n            return cb();\n        }\n\n        this.push(file);\n        cb();\n    },\n    function (cb) {\n        cb();\n    });\n};\n\nmodule.exports.report = function (options) {\n    options = options || {};\n    var reporter = options.reporter || 'html';\n\n    return through2.obj(\n        function (file, encoding, cb) {\n            if (!file.path) {\n                this.emit('error', new gutil.PluginError('gulp-coverage', 'Streaming not supported'));\n                return cb();\n            }\n            cb();\n        }, function (cb) {\n            var stats;\n\n            if (!coverInst) {\n                throw new Error('Must call instrument before calling report');\n            }\n            stats = coverInst.allStats();\n            cover.reporters[reporter](stats, options.outFile ? options.outFile : undefined);\n            this.push({ coverage: stats });\n            cb();\n        });\n};\n\nmodule.exports.gather = function () {\n    return through2.obj(\n        function (file, encoding, cb) {\n            if (!file.path) {\n                this.emit('error', new gutil.PluginError('gulp-coverage', 'Streaming not supported'));\n                return cb();\n            }\n            cb();\n        }, function (cb) {\n            var stats;\n\n            if (!coverInst) {\n                throw new Error('Must call instrument before calling report');\n            }\n            stats = coverInst.allStats();\n            this.push({ coverage: stats });\n            cb();\n        });\n};\n\nmodule.exports.enforce = function (options) {\n    options = options || {};\n    var statements = options.statements || 100,\n        blocks = options.blocks || 100,\n        lines = options.lines || 100,\n        uncovered = options.uncovered;\n    return through2.obj(\n        function (data, encoding, cb) {\n            if (!data.coverage) {\n                this.emit('error', new gutil.PluginError('gulp-coverage',\n                    'Must call gather or report before calling enforce'));\n                return cb();\n            }\n            if (data.coverage.statements < statements) {\n                this.emit('error', new gutil.PluginError('gulp-coverage',\n                    'statement coverage of ' + data.coverage.statements +\n                    ' does not meet the threshold of ' + statements));\n            }\n            if (data.coverage.coverage < lines) {\n                this.emit('error', new gutil.PluginError('gulp-coverage',\n                    'line coverage of ' + data.coverage.coverage +\n                    ' does not meet the threshold of ' + lines));\n            }\n            if (data.coverage.blocks < blocks) {\n                this.emit('error', new gutil.PluginError('gulp-coverage',\n                    'block coverage of ' + data.coverage.blocks +\n                    ' does not meet the threshold of ' + blocks));\n            }\n            if (data.coverage.uncovered && uncovered !== undefined && data.coverage.uncovered.length > uncovered) {\n                this.emit('error', new gutil.PluginError('gulp-coverage',\n                    'uncovered files of ' + data.coverage.uncovered.length +\n                    ' does not meet the threshold of ' + uncovered));\n            }\n            cb();\n        }, function (cb) {\n            cb();\n        });\n};\n\nmodule.exports.format = function (options) {\n    var reporters = options || [{}];\n    if (!Array.isArray(reporters)) reporters = [reporters];\n    return through2.obj(\n        function (data, encoding, cb) {\n            var file;\n            if (!data.coverage) {\n                this.emit('error', new gutil.PluginError('gulp-coverage',\n                    'Must call gather before calling enforce'));\n                cb();\n                return;\n            }\n            reporters.forEach(function(opts) {\n                if (typeof opts === 'string') opts = { reporter: opts };\n                var reporter = opts.reporter || 'html';\n                var outfile = opts.outFile || 'coverage.' + reporter;\n                file = new gutil.File({\n                    base: path.join(__dirname, './'),\n                    cwd: __dirname,\n                    path: path.join(__dirname, './', outfile),\n                    contents: new Buffer(cover.reporters[reporter](data.coverage))\n                });\n                file.coverage = data.coverage;\n                this.push(file);\n            }, this);\n            cb();\n        }, function (cb) {\n            cb();\n        });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/contrib/cover.js":"/*\n * Original code from https://github.com/itay/node-cover licensed under MIT did\n * not have a Copyright message in the file.\n *\n * Significantly re-written. The changed code is Copyright (C) 2014 Dylan Barrell\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nvar instrument = require('instrumentjs');\nvar Module = require('module').Module;\nvar path = require('path');\nvar fs = require('fs');\nvar vm = require('vm');\nvar _ = require('underscore');\nvar multimatch = require('multimatch');\nvar extend = require('extend');\n\n/**\n * Class used to track the coverage data for a single source code file\n *\n * @class FileCoverageData\n * @constructor\n * @param {String} filename - the name of the file\n * @param {Object} instrumentor - the object that will help with instrumentation\n */\nfunction FileCoverageData (filename, instrumentor) {\n    var theLines = {};\n    /*\n     * Create a map between the lines and the nodes\n     * This is used later for calculating the code coverage stats\n     */\n    Object.keys(instrumentor.nodes).forEach(function(index) {\n        var node = instrumentor.nodes[index],\n            lineStruct;\n\n        if (!theLines[node.loc.start.line]) {\n            lineStruct = theLines[node.loc.start.line] = {\n                nodes: []\n            };\n        } else {\n            lineStruct = theLines[node.loc.start.line];\n        }\n        if (lineStruct.nodes.indexOf(node) === -1) {\n            lineStruct.nodes.push(node);\n        }\n        if (!theLines[node.loc.end.line]) {\n            lineStruct = theLines[node.loc.end.line] = {\n                nodes: []\n            };\n        } else {\n            lineStruct = theLines[node.loc.end.line];\n        }\n        if (lineStruct.nodes.indexOf(node) === -1) {\n            lineStruct.nodes.push(node);\n        }\n    });\n    this.lines = theLines;\n    this.instrumentor = instrumentor;\n    this.filename = filename;\n    this.nodes = {};\n    this.visitedBlocks = {};\n    this.source = instrumentor.source;\n}\n\n/**\n * calculate the block coverage stats\n *\n * @private\n * @method _block\n * @return {Object} - structure containing `total` and `seen` counts for the blocks\n */\nFileCoverageData.prototype._blocks = function() {\n    var totalBlocks = this.instrumentor.blockCounter;\n    var numSeenBlocks = 0;\n    for(var index in this.visitedBlocks) {\n        numSeenBlocks++;\n    }\n    var toReturn = {\n        total: totalBlocks,\n        seen: numSeenBlocks\n    };\n    return toReturn;\n};\n\n/**\n * read the instrumentation data from the store into memory\n *\n * @private\n * @method _prepare\n * @return {undefined}\n */\nFileCoverageData.prototype._prepare = function() {\n    // console.log('PREPARE');\n    var data = require('./coverage_store').getStoreData(this.filename),\n        rawData, store, index;\n\n    data = '[' + data  + '{}]';\n    // console.log('DATA: ', data);\n    rawData = JSON.parse(data);\n    store = {nodes: {}, blocks: {}};\n    rawData.forEach(function(item) {\n        var it;\n        if (item.hasOwnProperty('block')) {\n            store.blocks[item.block] = store.blocks[item.block] || {count: 0};\n            store.blocks[item.block].count += 1;\n        } else {\n            if (item.expression) {\n                it = item.expression;\n            } else if (item.statement) {\n                it = item.statement;\n            } else if (item.chain) {\n                it = item.chain;\n            } else {\n                return;\n            }\n            store.nodes[it.node] = store.nodes[it.node] || {count: 0};\n            store.nodes[it.node].count += 1;\n        }\n    });\n    for (index in store.nodes) {\n        if (store.nodes.hasOwnProperty(index)) {\n            this.instrumentor.nodes[index].count = store.nodes[index].count;\n        }\n    }\n    for (index in store.blocks) {\n        if (store.blocks.hasOwnProperty(index)) {\n            this.visitedBlocks[index] = {count: store.blocks[index].count};\n        }\n    }\n};\n\n/**\n *\n * Get statistics for the entire file, including per-line code coverage\n * statement coverage and block-level coverage\n * This function returns an object with the following structure:\n * {\n *      lines: Integer - the number of lines covered\n *      blocks: Integer - the number of blocks covered\n *      statements: Integer - the number of statements covered\n *      lineDetails: Array[Object] - a sparse array of the detailed information on each line\n *      sloc: Integer - the number of relevant lines in the file\n *      sboc: Integer - the number of relevant blocks in the file\n *      ssoc: Integer - the number of relevant statements in the file\n *      code: Array[String] - an Array of strings, one for each line of the file\n * }\n *\n * The line detail objects have the following structure\n * {\n *      number: Integer - the line number\n *      count: Integer - the number of times the line was executed\n *      statements: Integer - the number of statements covered\n *      ssoc: Integer - the number of statements in the line\n *      statementDetails : Array[Object] - an array of the statement details\n * }\n *\n * The statement detail objects have the following structure\n * {\n *      loc: Object - a location object\n *      count: the number of times the statement was executed\n * }\n *\n */\n\nFileCoverageData.prototype.stats = function() {\n    // console.log('STATS');\n    this._prepare();\n        var filedata = this.instrumentor.source.split('\\n');\n    var lineDetails = [],\n        lines = 0, fileStatements = 0, fileSsoc = 0, fileSloc = 0,\n        theLines = this.lines,\n        blockInfo;\n\n    Object.keys(theLines).forEach(function(index) {\n        var line = theLines[index],\n            lineStruct,\n            lineCount = 0,\n            statements = 0,\n            ssoc = 0,\n            statementDetails = [];\n        line.nodes.forEach(function(node) {\n            var loc;\n            if (node.count === null || node.count === undefined) {\n                node.count = 0;\n            }\n            lineCount = Math.max(lineCount, node.count);\n            ssoc += 1;\n            if (node.count) {\n                statements += 1;\n            }\n            loc = {};\n            extend(loc, node.loc);\n            statementDetails.push({\n                loc: loc,\n                count: node.count\n            });\n        });\n        lineStruct = {\n            number: index,\n            count: lineCount,\n            ssoc: ssoc,\n            statements: statements,\n            statementDetails: statementDetails\n        };\n        lines += (lineStruct.count ? 1 : 0);\n        fileSloc += 1;\n        fileStatements += lineStruct.statements;\n        fileSsoc += lineStruct.ssoc;\n        lineDetails[index-1] = lineStruct;\n    });\n    blockInfo = this._blocks();\n    retVal = {\n        lines: lines,\n        statements: fileStatements,\n        blocks: blockInfo.seen,\n        sloc: fileSloc,\n        ssoc: fileSsoc,\n        sboc: blockInfo.total,\n        lineDetails: lineDetails,\n        code: filedata\n    };\n    return retVal;\n};\n\n\n/**\n * Generate the header at the top of the instrumented file that sets up the data structures that\n * are used to collect instrumentation data.\n *\n * @private\n * @method addInstrumentationHeader\n * @param {String} template - the contents of the template file\n * @param {String} filename - the full path name of the file being instrumented\n * @param {String} instrumented - the instrumented source code of the file\n * @param {String} coverageStorePath - the path to the coverage store\n * @return {String} the rendered file with instrumentation and instrumentation header\n */\nvar addInstrumentationHeader = function(template, filename, instrumented, coverageStorePath) {\n    var templ = _.template(template),\n        renderedSource = templ({\n            instrumented: instrumented,\n            coverageStorePath: coverageStorePath,\n            filename: filename,\n            source: instrumented.instrumentedSource\n        });\n    return renderedSource;\n};\n\nfunction relatify(arr) {\n    var retVal = [];\n    if (!Array.isArray(arr)) {\n        arr = [arr];\n    }\n    arr.forEach(function(item, index) {\n        if (item.indexOf('./') === 0 || item.indexOf('.\\\\') === 0) {\n            retVal[index] = item.substring(2);\n        } else if (item.charAt(0) === '!') {\n            if (item.indexOf('./') === 1 || item.indexOf('.\\\\') === 1) {\n                retVal[index] = '!' + item.substring(3);\n            } else {\n                retVal[index] = item;\n            }\n        } else {\n            retVal[index] = item;\n        }\n    });\n    return retVal;\n}\n\nfunction createFullPathSync(fullPath) {\n    if (!fullPath) {\n        return false;\n    }\n    var parts,\n        working = '/',\n        pathList = [];\n\n    if (fullPath[0] !== '/') {\n        fullPath = path.join(process.cwd(), fullPath);\n    }\n    parts = path.normalize(fullPath).split('/');\n    for(var i = 0, max = parts.length; i < max; i++) {\n        working = path.join(working, parts[i]);\n        pathList.push(working);\n    }\n    var recursePathList = function recursePathList(paths) {\n        var working;\n\n        if (!paths.length) {\n            return true;\n        }\n        working = paths.shift();\n        if( !fs.existsSync(working)) {\n            try {\n                fs.mkdirSync(working, 0755);\n            }\n            catch(e) {\n                return false;\n            }\n        }\n        return recursePathList(paths);\n    }\n    return recursePathList(pathList);\n}\n\n/**\n * @class CoverageSession\n * @constructor\n * @param {Array[glob]} pattern - the array of glob patterns of includes and excludes\n * @param {String} debugDirectory - the name of the director to contain debug instrumentation files\n */\nvar CoverageSession = function(pattern, debugDirectory) {\n    var normalizedPattern;\n    function stripBOM(content) {\n        // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n        // because the buffer-to-string conversion in `fs.readFileSync()`\n        // translates it to FEFF, the UTF-16 BOM.\n        if (content.charCodeAt(0) === 0xFEFF) {\n            content = content.slice(1);\n        }\n        return content;\n    }\n    var originalRequire = this.originalRequire = require.extensions['.js'];\n    var coverageData = this.coverageData = {};\n    var instrumentList = this.instrumentList = {};\n    // console.log('new coverageData');\n    var pathToCoverageStore = path.resolve(path.resolve(__dirname), 'coverage_store.js').replace(/\\\\/g, '/');\n    var templatePath = path.resolve(path.resolve(__dirname), 'templates', 'instrumentation_header.js');\n    var template = fs.readFileSync(templatePath, 'utf-8');\n    this.pattern = normalizedPattern = relatify(pattern);\n    require.extensions['.js'] = function(module, filename) {\n        var shortFilename;\n        filename = filename.replace(/\\\\/g, '/');\n\n        shortFilename = path.relative(process.cwd(), filename);\n        // console.log('filename: ', filename, ', shortFilename:', shortFilename, ', normalizedPattern: ', normalizedPattern, ', match: ', multimatch(shortFilename, pattern));\n        if (!multimatch(shortFilename, normalizedPattern).length) {\n            return originalRequire(module, filename);\n        }\n        if (filename === pathToCoverageStore) {\n            return originalRequire(module, filename);\n        }\n\n        var data = stripBOM(fs.readFileSync(filename, 'utf8').trim());\n        data = data.replace(/^\\#\\!.*/, '');\n\n        instrumentList[filename] = true;\n        var instrumented = instrument(data);\n        coverageData[filename] = new FileCoverageData(filename, instrumented);\n\n        var newCode = addInstrumentationHeader(template, filename, instrumented, pathToCoverageStore);\n\n        if (debugDirectory) {\n            createFullPathSync(debugDirectory);\n            var outputPath = path.join(debugDirectory, filename.replace(/[\\/|\\:|\\\\]/g, '_') + '.js');\n            fs.writeFileSync(outputPath, newCode);\n        }\n\n        return module._compile(newCode, filename);\n    };\n\n};\n\n/**\n * Release the original require function\n *\n * @method release\n */\nCoverageSession.prototype.release = function() {\n    for (var att in this.instrumentList) {\n        // console.log('deleting: ', att);\n        if (require.cache.hasOwnProperty(att)) {\n            delete require.cache[att];\n        }\n    }\n    require.extensions['.js'] = this.originalRequire;\n};\n\n\n/**\n * This function returns the unique segments for the lines that are covered by the statementDetails\n * argument. This is necessary because the segments, as generated by the parser/instrumentor, overlap\n * so in order to determine which segment is actually the segment responsible for a particular\n * piece of code, we have to split and eliminate the overlaps. Because we are interested only in the\n * segments that were missed, we can also try to consolidate the adjacent segments that were hit\n *\n * @private\n * @method getSegments\n * @param {Array[String]} code - array of the lines for the entire file\n * @param {Array[Object]} lines - array of the line ojects for the entire file\n * @param Integer count - the hit count for the outermost statement\n * @param Array{object} - array of overlapping statement segments\n */\nfunction getSegments(code, lines, count, statementDetails) {\n    var lengths = [], beginLine = code.length+1, endLine = 0, sd = [],\n        linesCode, i, j, k, splintered, segments;\n    // calculate the lengths of each line\n    code.forEach(function (codeLine) {\n        lengths.push(codeLine.length);\n    });\n    // work out which lines we are talking about\n    statementDetails.forEach(function(item) {\n        if (item.loc.start.line < beginLine) {\n            beginLine = item.loc.start.line;\n        }\n        if (item.loc.end.line > endLine) {\n            endLine = item.loc.end.line;\n        }\n    });\n    // modify all the coordinates into a single number\n    statementDetails.forEach(function(item) {\n        var lineNo = beginLine,\n            startOff = 0;\n        while (item.loc.start.line > lineNo) {\n            startOff += lengths[lineNo] + 1;\n            lineNo += 1;\n        }\n        startOff += item.loc.start.column;\n        endOff = 0;\n        lineNo = beginLine;\n        while (item.loc.end.line > lineNo) {\n            endOff += lengths[lineNo] + 1;\n            lineNo += 1;\n        }\n        endOff += item.loc.end.column;\n        sd.push({\n            start: startOff,\n            end: endOff,\n            count: item.count\n        });\n    });\n    linesCode = code.filter(function(item, index) {\n        return (index >= beginLine-1 && index <= endLine-1);\n    }).join('\\n');\n\n    // push on a synthetic segment to catch all the parts of the line(s)\n    sd.push({\n        start: 0,\n        end: linesCode.length,\n        count: count\n    });\n\n    // reconcile the overlapping segments\n    sd.sort(function(a, b) {\n        return (a.end - b.end);\n    });\n    sd.sort(function(a, b) {\n        return (a.start - b.start);\n    });\n    // Will now be sorted in start order with end as the second sort criterium\n    splintered = [];\n    for ( i = 0; i < sd.length; i++) {\n        var size = (sd[i].end - sd[i].start + 1 < 0) ? 0 : sd[i].end - sd[i].start + 1;\n        var us = new Array(size);\n        for (k = sd[i].end - sd[i].start; k >= 0; k--) {\n            us[k] = 1;\n        }\n        for (j = 0; j < sd.length; j++) {\n            if (j !== i) {\n                if (sd[i].start <= sd[j].start && sd[i].end >= sd[j].end &&\n                    (sd[i].count !== sd[j].count || !sd[i].count || !sd[j].count)) {\n                    for ( k = sd[j].start; k <= sd[j].end; k++) {\n                        us[k - sd[i].start] = 0;\n                    }\n                }\n            }\n        }\n        if (us.indexOf(0) !== -1) {\n            // needs to be split\n            splitStart = undefined;\n            splitEnd = undefined;\n            for (k = 0; k < us.length; k++) {\n                if (us[k] === 1 && splitStart === undefined) {\n                    splitStart = k;\n                } else if (us[k] === 0 && splitStart !== undefined) {\n                    splitEnd = k - 1;\n                    splintered.push({\n                        start: splitStart + sd[i].start,\n                        end: splitEnd + sd[i].start,\n                        count: sd[i].count\n                    });\n                    splitStart = undefined;\n                }\n            }\n            if (splitStart !== undefined) {\n                splintered.push({\n                    start: splitStart + sd[i].start,\n                    end: k - 1 + sd[i].start,\n                    count: sd[i].count\n                });\n            }\n        } else {\n            splintered.push(sd[i]);\n        }\n    }\n    if (splintered.length === 0) {\n        return [];\n    }\n    splintered.sort(function(a, b) {\n        return (b.end - a.end);\n    });\n    splintered.sort(function(a, b) {\n        return (a.start - b.start);\n    });\n    var combined = [splintered[0]];\n    splintered.reduce(function(p, c) {\n        if (p && p.start <= c.start && p.end >= c.end &&\n            (p.count === c.count || (p.count && c.count))) {\n            // Can get rid of c\n            return p;\n        } else {\n            combined.push(c);\n            return c;\n        }\n    });\n    // combine adjacent segments\n    currentItem = {\n        start: combined[0].start,\n        end: combined[0].end,\n        count: combined[0].count\n    };\n    segments = [];\n    combined.splice(0,1);\n    combined.forEach(function(item) {\n        if (item.count === currentItem.count || (item.count && currentItem.count)) {\n            currentItem.end = item.end;\n        } else {\n            segments.push(currentItem);\n            currentItem = {\n                start: item.start,\n                end: item.end,\n                count: item.count\n            };\n        }\n    });\n    segments.push(currentItem);\n    // Now add the code to each segment\n    segments.forEach(function(item) {\n        item.code = linesCode.substring(item.start, item.end);\n    });\n    return segments;\n}\n\n/**\n * The nodes (lines) that are returned by the parser overlap. There is one node generated for the beginning\n * and one for the end of each block and individual nodes may span multiple lines. This function\n * eliminates the duplicates and the overlaps such that there is at most one line responsible for each\n * source code line. The function does this by splitting the line objects that wrap other lines into the\n * piece before and the piece after.\n *\n * @private\n * @method splitOverlaps\n * @param {Array[Object]} lines - array of line (node) objects\n * @param {Array[String]} code - array of source code lines\n */\nfunction splitOverlaps(lines, code) {\n    var i, j, left, right, insertAt;\n\n    for ( i = 0; i < lines.length; i++) {\n        if (lines[i]) {\n            for (j = lines[i].statementDetails.length; j--;) {\n                if (lines[i].statementDetails[j].loc.start.line < i+1) {\n                    if (lines[i].statementDetails[j].loc.end.line >= i+1) {\n                        lines[i].statementDetails[j].loc.start.line = i+1;\n                        lines[i].statementDetails[j].loc.start.column = 0;\n                    } else {\n                        lines[i].statementDetails.splice(j, 1);\n                    }\n                }\n            }\n            if (lines[i].statementDetails[0] && lines[i].statementDetails[0].loc.start.column) {\n                lines[i].statementDetails[0].loc.start.column = 0;\n            }\n            for (j = i + 1; j < lines.length; j++) {\n                if (lines[i] && lines[j]) {\n                    left = {\n                        start: undefined,\n                        end: undefined\n                    };\n                    right = {\n                        start: undefined,\n                        end: undefined\n                    };\n                    lines[i].statementDetails.forEach(function(item, index) {\n                        if (left.start === undefined) {\n                            left.start = item.loc.start.line;\n                        }\n                        if (left.end === undefined) {\n                            left.end = item.loc.end.line;\n                        } else {\n                            left.end = Math.max(left.end, item.loc.end.line);\n                        }\n                    });\n                    lines[j].statementDetails.forEach(function(item) {\n                        if (right.start === undefined) {\n                            right.start = item.loc.start.line;\n                        }\n                        if (right.end === undefined) {\n                            right.end = item.loc.end.line;\n                        } else {\n                            right.end = Math.max(right.end, item.loc.end.line);\n                        }\n                    });\n                }\n                if (i !== j &&\n                    lines[i] && lines[j] && left.start <= right.start && left.end >= right.end) {\n                    if (left.start === right.start && left.end <= right.end) {\n                        lines[j] = undefined;\n                    } else {\n                        lines[i].statementDetails.forEach(function(item, index) {\n                            if (item.loc.start.line !== item.loc.end.line) {\n                                if (i > j || left.start === right.start) {\n                                    lines[i] = undefined;\n                                }\n                                if (item.loc.end.line > right.end) {\n                                    // need to split it\n                                    insertAt = right.end+1;\n                                    while (lines[insertAt-1] && insertAt <= left.end) {\n                                        insertAt += 1;\n                                    }\n                                    if (insertAt <= left.end) {\n                                        lines[insertAt-1] = {\n                                            number: (insertAt).toString(),\n                                            count: undefined,\n                                            statementDetails: [{\n                                                loc: {\n                                                    start: {\n                                                        line: insertAt,\n                                                        column: 0\n                                                    },\n                                                    end: {\n                                                        line: item.loc.end.line,\n                                                        column: item.loc.end.column\n                                                    }\n                                                }\n                                            }]\n                                        };\n                                    }\n                                }\n                                if (i < j && left.start !== right.start) {\n                                    item.loc.end.line = right.start - 1;\n                                    item.loc.end.column = code[item.loc.start.line-1].length;\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n        } else {\n            lines[i] = undefined;\n        }\n    }\n    for (j = lines.length; j--;) {\n        if (!lines[j]) {\n            lines[j] = undefined;\n        } else {\n            if (lines[j].statementDetails[0] &&\n                lines[j].statementDetails[0].loc.start.column === 0 &&\n                lines[j].statementDetails[0].loc.end.column === 0) {\n                lines[j] = undefined;\n            }\n        }\n    }\n    return lines;\n}\n\nfunction linesWithData(lines) {\n    var interim = [],\n        unique, i;\n    lines.forEach(function(item, index) {\n        if (item) {\n            item.statementDetails.forEach(function(statement) {\n                for (i = statement.loc.start.line; i <= statement.loc.end.line; i++) {\n                    interim.push(i);\n                }\n            });\n        }\n    });\n    interim.sort(function(a,b) {return a - b;});\n    if (interim.length) {\n        unique = [interim[0]];\n        interim.reduce(function(p, c) {\n            if (p === c) {\n                // Can get rid of c\n                return p;\n            } else {\n                unique.push(c);\n                return c;\n            }\n        });\n    } else {\n        unique = [];\n    }\n    return unique;\n}\n\nfunction getAllFiles(dir) {\n    var retVal = [],\n        subDir,\n        files = fs.readdirSync(dir);\n\n    //console.log('precessing:', dir);\n    files.forEach(function (file) {\n        var fullPath = path.join(dir, file);\n        try {\n            fs.readdirSync(fullPath);\n            subDir = getAllFiles(fullPath);\n            retVal = retVal.concat(subDir);\n        } catch (err) {\n            retVal.push(path.relative(process.cwd(),fullPath));\n        }\n    });\n    return retVal;\n}\n\n/**\n * Generate a coverage statistics structure for all of the instrumented files given all the data that\n * has been generated for them to date\n * {\n *        sloc: Integer - how many source lines of code there were in total\n *        ssoc: Integer - how many statements of code there were in total\n *        sboc: Integer - how many blocks of code there were in total\n *        coverage: Float - percentage of lines covered\n *        statements: Float - percentage of statements covered\n *        blocks: Float: percentage of blocks covered\n *        files: Array[Object] - array of information about each file\n *        uncovered: Array[String] - array of the files that match the patterns that were not tested at all\n * }\n *\n * Each file has the following structure\n * {\n *        filename: String - the file\n *        basename: String - the file short name\n *        segments: String - the file's directory\n *        coverage: Float - the percentage of lines covered\n *        statements: Float - the percentage of statements covered\n *        blocks: Float - the percentage of blocks covered\n *        source: Array[Object] - array of objects, one for each line of code\n *        sloc: Integer - the number of lines of code\n *        ssoc: Integer - the number of statements of code\n *        sboc: Integer - the number of blocks of code\n * }\n *\n * Each line has the following structure\n * {\n *        count: Integer - number of times the line was hit\n *        statements: Float - the percentage of statements covered\n *        segments: Array[Object] - the segments of statements that make up the line\n * }\n *\n * Each statement segment has the following structure\n * {\n *      code: String - the string of code for the segment\n *      count: Integer - the hit count for the segment\n * }\n *\n * @method allStats\n * @return {Object} - the structure containing all the coverage stats for the coverage instance\n *\n */\nCoverageSession.prototype.allStats = function () {\n    var stats = { files : []},\n        allFiles = [],\n        that = this,\n        shouldBeCovered = [],\n        filename, item, lines, sourceArray, segments,\n        totSloc, totCovered, totBloc, totStat, totStatCovered, totBlocCovered,\n        coverageData = this.coverageData;\n\n    totSloc = totCovered = totBloc = totStat = totStatCovered = totBlocCovered = 0;\n    allFiles = getAllFiles(process.cwd());\n    allFiles.forEach(function (filename) {\n        shortFilename = path.relative(process.cwd(), filename);\n        //console.log('filename: ', filename, ', shortFilename:', shortFilename, ', this.pattern: ', that.pattern, ', match: ', multimatch(shortFilename, that.pattern));\n        if (multimatch(shortFilename, that.pattern).length &&\n            shortFilename.indexOf('node_modules') === -1) {\n            shouldBeCovered.push(shortFilename);\n        }\n    });\n\n    // console.log(shouldBeCovered);\n    // console.log(coverageData);\n    Object.keys(coverageData).forEach(function(filename) {\n        var fstats, lines, code, dataLines, shortFilename, index;\n\n        fstats = coverageData[filename].stats();\n        shortFilename = path.relative(process.cwd(), filename);\n        index = shouldBeCovered.indexOf(shortFilename);\n        if (index !== -1) {\n            shouldBeCovered.splice(index, 1);\n        }\n        // console.log('fstats: ', fstats, ', filename; ', filename);\n        code = fstats.code;\n        splitOverlaps(fstats.lineDetails, code);\n        dataLines = linesWithData(fstats.lineDetails);\n        lines = fstats.lineDetails;\n        sourceArray = [];\n        code.forEach(function(codeLine, index){\n            var count = -1, statements = null, numStatements = 0, segs, lineNo, allSame = true, lineStruct;\n            line = lines[index];\n            if (line && line.statementDetails[0]) {\n                count = line.count;\n                statements = 0;\n                lineNo = line.statementDetails[0].loc.start.line;\n                line.statementDetails.forEach(function(statement) {\n                    numStatements += 1;\n                    if (statement.count) {\n                        statements += 1;\n                    }\n                    if (statement.loc.start.line !== statement.loc.end.line || statement.loc.start.line !== lineNo) {\n                        allSame = false;\n                    }\n                });\n                if (count) {\n                    segs = getSegments(code, lines, count, line.statementDetails);\n                } else {\n                    segs = [{\n                        code: codeLine,\n                        count: count\n                    }];\n                }\n            } else {\n                segs = [{\n                    code: codeLine,\n                    count: 0\n                }];\n            }\n            lineStruct = {\n                coverage: count,\n                statements: statements === null ? 100 : (statements / numStatements) * 100,\n                segments: segs\n            };\n            sourceArray.push(lineStruct);\n        });\n        filename = path.relative(process.cwd(), filename).replace(/\\\\/g, '/');\n        segments = filename.split('/');\n        item = {\n            filename: filename,\n            basename: segments.pop(),\n            segments: segments.join('/') + '/',\n            coverage: (fstats.lines / fstats.sloc) * 100,\n            statements: (fstats.statements / fstats.ssoc) * 100,\n            blocks: (fstats.blocks / fstats.sboc) * 100,\n            source: sourceArray,\n            sloc: fstats.sloc,\n            sboc: fstats.sboc,\n            ssoc: fstats.ssoc\n        };\n        // console.log('item: ', item);\n        totStat += fstats.ssoc;\n        totBloc += fstats.sboc;\n        totSloc += fstats.sloc;\n        totCovered += fstats.lines;\n        totStatCovered += fstats.statements;\n        totBlocCovered += fstats.blocks;\n        stats.files.push(item);\n    });\n    stats.sloc = totSloc;\n    stats.ssoc = totStat;\n    stats.sboc = totBloc;\n    stats.coverage = totCovered / totSloc * 100;\n    stats.statements = totStatCovered / totStat * 100;\n    stats.blocks = totBlocCovered / totBloc * 100;\n    stats.uncovered = shouldBeCovered;\n    // console.log('stats: ', stats);\n    // console.log(shouldBeCovered);\n    return stats;\n};\n\n/**\n * create a new CoverageSession object\n *\n * @method cover\n * @param {Array[glob]} pattern - the array of glob patterns of includes and excludes\n * @param {String} debugDirectory - the name of the director to contain debug instrumentation files\n * @return {Object} the CoverageSession instance\n */\nvar cover = function(pattern, debugDirectory) {\n    return new CoverageSession(pattern, debugDirectory);\n};\n\n\nfunction removeDir(dirName) {\n    fs.readdirSync(dirName).forEach(function(name) {\n        if (name !== '.' && name !== '..') {\n            try {\n                fs.unlinkSync(path.join(dirName, name));\n            } catch (err) {}\n        }\n    });\n    try {\n        fs.rmdirSync(dirName);\n    } catch(err) {}\n}\n\n/**\n * This initializes a new coverage run. It does this by creating a randomly generated directory\n * in the .coverdata and updating the .coverrun file in the process' cwd with the directory's\n * name, so that the data collection can write data into this directory\n */\nvar init = function() {\n    var directoryName = '.cover_' + Math.random().toString().substring(2),\n        dataDir = path.join(process.cwd(), '.coverdata');\n    if (!fs.existsSync(dataDir)) {\n        fs.mkdirSync(dataDir);\n    } else {\n        fs.readdirSync(dataDir).forEach(function(name) {\n            if (name !== '.' && name !== '..') {\n                removeDir(path.join(dataDir, name));\n            }\n        });\n    }\n    fs.mkdirSync(path.join(dataDir, directoryName));\n    fd = fs.writeFileSync(path.join(process.cwd(), '.coverrun'), '{ \"run\" : \"' + directoryName + '\" }');\n};\n\nvar cleanup = function() {\n    var store = require('./coverage_store');\n\n    store.clearStore();\n};\n\nmodule.exports = {\n    cover: cover,\n    init: init,\n    cleanup: cleanup,\n    reporters: {\n        html:   require('./reporters/html'),\n        lcov:   require('./reporters/lcov'),\n        json:   require('./reporters/json')\n    }\n};","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/contrib/reporters/html.js":"/**\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n\tpath = require('path');\n\n/**\n * Expose `HTMLCov`.\n */\n\nexports = module.exports = HTMLCov;\n\nfunction HTMLCov (coverageData, filename) {\n\tvar jade = require('jade'), \n\t\tfile = path.join(__dirname, 'templates', 'coverage.jade'),\n\t\tstr = fs.readFileSync(file, 'utf8'),\n\t\tfn = jade.compile(str, { filename: file }),\n\t\toutput = fn({\n\t\t\tcov: coverageData,\n\t\t\tcoverageClass: coverageClass,\n\t\t\tcoverageCategory: coverageCategory\n\t\t});\n\tif (!filename) {\n\t\treturn output;\n\t} else {\n\t\tfs.writeFileSync(filename, output);\n\t}\n}\n\nfunction coverageCategory(line) {\n\treturn line.coverage === 0 ?\n\t\t\t\t'miss' :\n\t\t\t\t(line.statements ?\n\t\t\t\t\t'hit ' + (line.statements.toFixed(0) != 100 ? 'partial' : '')\n\t\t\t\t\t: '');\n}\n\nfunction coverageClass (n) {\n\tif (n >= 75) {\n\t\treturn 'high';\n\t}\n\tif (n >= 50) {\n\t\treturn 'medium';\n\t}\n\tif (n >= 25) {\n\t\treturn 'low';\n\t}\n\treturn 'terrible';\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/contrib/reporters/lcov.js":"/**\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path');\n\n/**\n * Expose `'LCOVCov'`.\n */\n\nexports = module.exports = LCOVCov;\n\nfunction LCOVCov (coverageData, filename) {\n    var output = 'TN:gulp-coverage output\\n';\n\n    coverageData.files.forEach(function (fileData) {\n        var fileOutput = 'SF:' + path.join(process.cwd(), fileData.filename) + '\\n',\n            instrumented = 0;\n        fileOutput += 'BRF:' + fileData.ssoc + '\\n';\n        fileOutput += 'BRH:' + Math.round(fileData.ssoc * fileData.statements/100) + '\\n';\n        fileData.source.forEach(function (lineData, index) {\n            if (lineData.coverage !== null) {\n                instrumented += 1;\n                fileOutput += 'DA:' + (index + 1) + ',' + lineData.coverage + '\\n';\n            }\n        });\n        fileOutput += 'LH:' + instrumented + '\\n';\n        fileOutput += 'LF:' + fileData.source.length + '\\n';\n        fileOutput += 'end_of_record\\n';\n        output += fileOutput;\n    });\n\n    if (!filename) {\n        return output;\n    } else {\n        fs.writeFileSync(filename, output);\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/contrib/reporters/json.js":"/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\n\n/**\n * Expose `JSONCov`.\n */\n\nexports = module.exports = JSONCov;\n\nfunction JSONCov (coverageData, filename) {\n    if (!filename) {\n        return JSON.stringify(coverageData, null, ' ');\n    } else {\n        fs.writeFileSync(filename, JSON.stringify(coverageData, null, ' '));\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/gulpfile.js":"var gulp = require('gulp'),\n    cover = require('./index'),\n    mochaTask = require('gulp-mocha'),\n    jshint = require('gulp-jshint'),\n    exec = require('child_process').exec,\n    jasmineTask = require('gulp-jasmine'),\n    coverallsTask = require('gulp-coveralls'),\n    through2 = require('through2');\n\n/*\n * Define the dependency arrays\n */\n\nvar lintDeps = [],\n    testDeps = [],\n    debugDeps = [],\n    mochaDeps = [],\n    jsonDeps = [],\n    jasmineDeps = [],\n    testchainDeps = [],\n    rewireDeps = [],\n    classPatternDeps = [],\n    coverallsDeps = [];\n\n/*\n * Define the task functions\n */\n\nfunction test () {\n    return gulp.src(['test/**.js'], { read: false })\n        .pipe(mochaTask({\n            reporter: 'spec',\n        }));\n}\n\nfunction lint () {\n    return gulp.src(['test/**/*.js', 'index.js', 'contrib/cover.js', 'contrib/coverage_store.js', 'contrib/reporters/**/*.js'])\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'));\n}\n\nfunction debug (cb) {\n    exec('node --debug-brk debug/chaindebug.js', {}, function (error, stdout, stderr) {\n        console.log('STDOUT');\n        console.log(stdout);\n        console.log('STDERR');\n        console.log(stderr);\n        if (error) {\n            console.log('-------ERROR-------');\n            console.log(error);\n        }\n    });\n    cb();\n}\n\nfunction mocha () {\n    return gulp.src(['testsupport/src.js', 'testsupport/src3.js'], { read: false })\n        .pipe(cover.instrument({\n            pattern: ['**/test*'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(mochaTask({\n            reporter: 'spec'\n        }))\n        .pipe(cover.gather())\n        .pipe(cover.format({\n            outFile: 'blnkt.html'\n        }))\n        .pipe(gulp.dest('./testoutput'));\n}\n\nfunction classPattern () {\n    return gulp.src(['testsupport/src4.js'], { read: false })\n        .pipe(cover.instrument({\n            pattern: ['**/test3.js'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(mochaTask({\n            reporter: 'spec'\n        }))\n        .pipe(cover.gather())\n        .pipe(cover.format({\n            outFile: 'classPattern.html'\n        }))\n        .pipe(gulp.dest('./testoutput'));\n}\n\n\n\nfunction coveralls () {\n    return gulp.src(['testsupport/src.js', 'testsupport/src3.js'], { read: false })\n        .pipe(cover.instrument({\n            pattern: ['**/test*'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(mochaTask({\n            reporter: 'spec'\n        }))\n        .pipe(cover.gather())\n        .pipe(cover.format({\n            reporter: 'lcov'\n        }))\n        .pipe(coverallsTask())\n        .pipe(gulp.dest('./testoutput'));\n}\n\nfunction rewire () {\n    return gulp.src(['testsupport/rewire.js'], { read: false })\n        .pipe(cover.instrument({\n            pattern: ['testsupport/myModule.js'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(mochaTask({\n            reporter: 'spec'\n        }))\n        .pipe(cover.gather())\n        .pipe(cover.format({\n            outFile: 'rewire.html'\n        }))\n        .pipe(gulp.dest('./testoutput'));\n}\n\nfunction json () {\n    return gulp.src(['testsupport/src.js', 'testsupprt/src3.js'], { read: false })\n        .pipe(cover.instrument({\n            pattern: ['**/test*'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(mochaTask({\n            reporter: 'spec'\n        }))\n        .pipe(cover.report({\n            reporter: 'json',\n            outFile: 'testoutput/json.json'\n        }));\n}\n\nfunction jasmine () {\n    return gulp.src('testsupport/srcjasmine.js')\n        .pipe(cover.instrument({\n            pattern: ['**/test*'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(jasmineTask())\n        .pipe(cover.gather())\n        .pipe(cover.format({\n            outFile: 'jasmine.html'\n        }))\n        .pipe(gulp.dest('./testoutput'));\n}\n\ngulp.task('test', function() {\n  // Be sure to return the stream\n});\n\nfunction testchain () {\n    return gulp.src(['testsupport/srcchain.js'], { read: false })\n        .pipe(cover.instrument({\n            pattern: ['**/chain.js'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(mochaTask({\n            reporter: 'spec'\n        }))\n        .pipe(cover.gather())\n        .pipe(cover.format({\n            outFile: 'chain.html'\n        }))\n        .pipe(gulp.dest('./testoutput'))\n        .pipe(cover.format({\n            outFile: 'chain.json',\n            reporter: 'json'\n        }))\n        .pipe(gulp.dest('./testoutput'));\n}\n\n\nfunction testc2 () {\n    return gulp.src(['testsupport/c2_test.js'], { read: false })\n        .pipe(cover.instrument({\n            pattern: ['**/c2_cov.js'],\n            debugDirectory: 'debug/info'\n        }))\n        .pipe(mochaTask({\n            reporter: 'spec'\n        }))\n        .pipe(cover.gather())\n        .pipe(cover.format({\n            outFile: 'c2.html'\n        }))\n        .pipe(gulp.dest('./testoutput'))\n        .pipe(cover.format({\n            outFile: 'c2.json',\n            reporter: 'json'\n        }))\n        .pipe(gulp.dest('./testoutput'));\n}\n/*\n * setup function\n */\n\nfunction setup () {\n    gulp.task('coveralls', coverallsDeps, coveralls);\n    gulp.task('rewire', rewireDeps, rewire);\n    gulp.task('classPattern', classPatternDeps, classPattern);\n    gulp.task('test', testDeps, test);\n    gulp.task('lint', lintDeps, lint);\n    gulp.task('mocha', mochaDeps, mocha);\n    gulp.task('json', jsonDeps, json);\n    gulp.task('jasmine', jasmineDeps, jasmine);\n    gulp.task('testchain', testchainDeps, testchain);    \n}\n\n/*\n * Actual task defn\n */\n\ngulp.task('default', function() {\n    // Setup the chain of dependencies\n    coverallsDeps = ['classPattern'];\n    rewireDeps = ['coveralls'];\n    testchainDeps = ['rewire'];\n    jasmineDeps = ['testchain'];\n    jsonDeps = ['jasmine'];\n    mochaDeps = ['json'];\n    testDeps = ['mocha'];\n    setup();\n    gulp.run('test');\n});\n\ngulp.task('debug', debugDeps, debug);\n\ngulp.task('c2', [], testc2);\n\nsetup();\n\ngulp.task('watch', function () {\n    jasmineDeps = ['mocha'];\n    setup();\n    gulp.watch(['testsupport/src.js', 'testsupport/src3.js', 'testsupport/test.js', 'testsupport/test2.js'], function(event) {\n      gulp.run('jasmine');\n    });    \n});\n\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/c2_cov.js":"module.exports = function () {\n\tvar a = false, b = false;\n\n\tif (a && b) {\n\t\tconsole.log('a && b');\n\t}\n\n\ta = true;\n\n\tif (a && b) {\n\t\tconsole.log('a && b');\n\t}\n\n\tb = true;\n\ta = false;\n\n\tif (a && b) {\n\t\tconsole.log('a && b');\n\t}\n\n\ta = true;\n\tb = true;\n\n\tif (a && b) {\n\t\tconsole.log('a && b');\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/chainable.js":"var inherits = require('util').inherits;\nvar extend = require('extend');\n\nvar Chainable = function() {\n};\n\ninherits(Chainable, Array);\n\nvar dataBase = [\n    'karin eichmann',\n    'dylan barrell',\n    'john smith',\n    'laurel a. neighbor',\n    'donny evans',\n    'julie y. jankowicz',\n    'zack pearlfisher'];\n\nChainable.prototype.find = function(qTerm) {\n    var q = qTerm.toLowerCase();\n    dataBase.forEach(function(item) {\n        if (item.indexOf(q) !== -1) {\n            this.push(item);\n        }\n    }, this);\n    return this;\n};\n\nChainable.prototype.remove = function(index, number) {\n    if (index !== -1) {\n        this.splice(index, number !== undefined ? number : 1);\n    }\n    return this;\n};\n\nChainable.prototype.format = function(options) {\n    var defaultOptions = {\n        first: true,\n        last: true,\n        middle : true\n    };\n    extend(defaultOptions, options);\n    this.forEach(function(item, index) {\n        var arr = item.trim().split(' '),\n            i;\n        if (defaultOptions.middle && arr.length > 2) {\n            for (i = 1; i < arr.length - 1; i++) {\n                arr[i] = arr[i][0].toUpperCase() + arr[i].substring(1);\n            }\n        }\n        if (defaultOptions.first) {\n            arr[0] = arr[0][0].toUpperCase() + arr[0].substring(1);\n        }\n        if (defaultOptions.last) {\n            arr[arr.length - 1] = arr[arr.length - 1][0].toUpperCase() + arr[arr.length - 1].substring(1);\n        }\n        this[index] = arr.join(' ');\n    }, this);\n    return this;\n};\n\nChainable.prototype.write = function() {\n    // noop\n    return this;\n};\n\n\nmodule.exports = Chainable;\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/chain.js":"var Chainable = require('./chainable');\n\nmodule.exports = function () {\n    var str = '473628742687';\n    var f = function () {};\n\n    // Chanable function\n    f.func = function () {return this};\n    f.func().func();\n\n    // Chainable object\n    chain = new Chainable();\n    chain.find('zack').format({middle: false}).remove(0, 1).write();\n\n    // non-object method call (looks like a chainable from a syntax tree perspective)\n    str = str.substr(0, 2);\n\n    Math.floor(\n        Math.random()*\n        10+\n        0.5\n    );\n    return chain;\n};\n\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/myModule.js":"var myLocalGlobal = function () {};\n\n// Calls myLocalGlobal\nexports.myFunction = function () {\n    myLocalGlobal();\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/rewire.js":"var assert = require('assert'),\n    rewire = require('rewire'),\n    myModule = rewire('./myModule');\n\ndescribe('Test Rewire', function () {\n    var called = false;\n    myModule.__set__('myLocalGlobal', function () {\n        called = true;\n    })\n    it('Should rewire the function and call the rewired function', function () {\n        myModule.myFunction();\n        assert.ok(called);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/src2.js":"var assert = require('assert'),\n    test = require('./test2');\n\ndescribe('Test Src2', function () {\n    it('Should run this test Src2', function () {\n        assert.ok(!true);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/test2.js":"module.exports = function () {\n    var i,\n        retVal = 0;\n\n    for (i = 0; i < 10; i++) {\n        if (false) {\n            retVal/0;\n            retVal += 1;\n            //#JSCOVERAGE_IF\n            retVal += 2;\n            //#JSCOVERAGE_ENDIF\n        } else {\n            retVal = retVal;\n        }\n    }\n    return retVal;\n};\nvar uncovered = true; //cover:false\n//#JSCOVERAGE_IF\nif (false) {\n    var retVal = 19;\n}\n//#JSCOVERAGE_IF 0\n//#JSCOVERAGE_IF\nif (false) {\n    retVal += 1;\n}\nif (false) {\n    retVal += 1;\n}\nif (false) {\n    retVal += 1;\n}","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/src3.js":"var assert = require('assert'),\n    test = require('./test');\n\ndescribe('Test Src3', function () {\n    it('Should run this test Src3', function () {\n        assert.ok(true);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/test.js":"module.exports = function () {\n    var i, matcher,\n        retVal = 0,\n        a = true, b = false;\n\n    // throw new Error('bugger');\n    for (i = 0; i < 10; i++) {\n        matcher = Math.floor(\n            Math.random()*\n            10+\n            0.5\n        );\n        if (matcher === i) {\n            retVal += 1;\n            retVal += 1;\n        } else {\n            retVal = (retVal > 100 ? retVal + 1 : retVal + 2);\n        }\n    }\n    if (a || b) {\n        retVal += 2;\n    } else {\n        retVal += 1;\n    }\n    return retVal;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/src4.js":"var assert = require('assert'),\n    Controller = require('./test3');\n\ndescribe('Test AlertController', function () {\n    it('Should work', function () {\n        var c = new Controller();\n        assert.equal(c.show(), 1);\n        assert.equal(c.hide(), 0);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/test3.js":"\"use strict\";\n\nvar AlertController = function () {\n    this.count = 0;\n};\n\nAlertController.prototype = {\n    /**\n     * Comment\n     */\n    show: function () {\n        this.count++;\n        return this.count;\n    },\n\n    /**\n     * comment\n     */\n    hide: function () {\n        this.count--;\n        return this.count;\n    }\n};\n\n// to pull into node namespace if included\nif (typeof module !== \"undefined\" && module.exports !== undefined) {\n    module.exports = AlertController;\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/srcchain.js":"var assert = require('assert'),\n    test = require('./chain');\n\ndescribe('Test Src', function () {\n    it('Should run this test for the chainable and not find an enumerable __instrumented_miss attribute on the object', function () {\n        var chain = test(),\n            props = [],\n            i;\n        for(i in chain) {\n            props[i] = true;\n        }\n        assert.ok(chain.hasOwnProperty('__instrumented_miss'));\n        assert.ok(!props['__instrumented_miss']);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/srcjasmine.js":"var test = require('./test');\n\ndescribe('Test Src', function () {\n    it('Should run this test Src', function () {\n        test();\n        expect(true).toBe(true);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/testsupport/src.js":"var assert = require('assert'),\n    test = require('./test');\n\ndescribe('Test Src', function () {\n    it('Should run this test Src', function () {\n        test();\n        assert.ok(true);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-coverage/node_modules/gulp-coverage/contrib/templates/instrumentation_header.js":"\n// Instrumentation Header\n{\n    var fs = require('fs');\n    var <%= instrumented.names.statement %>, <%= instrumented.names.expression %>, <%= instrumented.names.block %>;\n    var store = require('<%= coverageStorePath %>');\n    \n    <%= instrumented.names.statement %> = function(i) {\n        var fd = store.register('<%= filename %>');\n        fs.writeSync(fd, '{\"statement\": {\"node\": ' + i + '}},\\n');\n    }; \n    \n    <%= instrumented.names.expression %> = function(i) {\n        var fd = store.register('<%= filename %>');\n        fs.writeSync(fd, '{\"expression\": {\"node\": ' + i + '}},\\n');\n    }; \n    \n    <%= instrumented.names.block %> = function(i) {\n        var fd = store.register('<%= filename %>');\n        fs.writeSync(fd, '{\"block\": ' + i + '},\\n');\n    }; \n    <%= instrumented.names.intro %> = function(id, obj) {\n        // console.log('__intro: ', id, ', obj.__instrumented_miss: ', obj.__instrumented_miss, ', obj.length: ', obj.length);\n        (typeof obj === 'object' || typeof obj === 'function') &&\n            Object.defineProperty && Object.defineProperty(obj, '__instrumented_miss', {enumerable: false, writable: true});\n        obj.__instrumented_miss = obj.__instrumented_miss || [];\n        if ('undefined' !== typeof obj && null !== obj && 'undefined' !== typeof obj.__instrumented_miss) {\n            if (obj.length === 0) {\n                // console.log('interim miss: ', id);\n                obj.__instrumented_miss[id] = true;\n            } else {\n                obj.__instrumented_miss[id] = false;\n            }\n        }\n        return obj;\n    };\n    function isProbablyChainable(obj, id) {\n        return obj &&\n            obj.__instrumented_miss[id] !== undefined &&\n            'number' === typeof obj.length;\n    }\n    <%= instrumented.names.extro %> = function(id, obj) {\n        var fd = store.register('<%= filename %>');\n        // console.log('__extro: ', id, ', obj.__instrumented_miss: ', obj.__instrumented_miss, ', obj.length: ', obj.length);\n        if ('undefined' !== typeof obj && null !== obj && 'undefined' !== typeof obj.__instrumented_miss) {\n            if (isProbablyChainable(obj, id) && obj.length === 0 && obj.__instrumented_miss[id]) {\n                // if the call was not a \"constructor\" - i.e. it did not add things to the chainable\n                // and it did not return anything from the chainable, it is a miss\n                // console.log('miss: ', id);\n            } else {\n                fs.writeSync(fd, '{\"chain\": {\"node\": ' + id + '}},\\n');\n            }\n            obj.__instrumented_miss[id] = undefined;\n        } else {\n            fs.writeSync(fd, '{\"chain\": {\"node\": ' + id + '}},\\n');\n        }\n        return obj;\n    };\n};\n////////////////////////\n\n// Instrumented Code\n<%= source %>"}